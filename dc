import hashlib

# ===== Basic RSA Helpers =====
def modinv(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        a, m = m, a % m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def generate_keys(p, q):
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 17  # Common choice
    d = modinv(e, phi)
    return (e, d, n)

def hash_data(data):
    h = hashlib.sha256(data.encode()).hexdigest()
    return int(h, 16)

# ===== Certificate Functions =====
def create_certificate(name, public_key, ca_private_key, ca_n):
    data = f"{name}:{public_key[0]}:{public_key[1]}"
    hashed = hash_data(data) % ca_n
    signature = pow(hashed, ca_private_key, ca_n)
    return {
        "name": name,
        "public_key": public_key,
        "signature": signature
    }

def verify_certificate(cert, ca_public_key, ca_n):
    data = f"{cert['name']}:{cert['public_key'][0]}:{cert['public_key'][1]}"
    hashed = hash_data(data) % ca_n
    decrypted = pow(cert['signature'], ca_public_key, ca_n)
    return hashed == decrypted

# ===== Demo =====
# Step 1: CA generates keys
ca_e, ca_d, ca_n = generate_keys(89, 97)
ca_public_key = ca_e
ca_private_key = ca_d

# Step 2: Alice generates her keys
alice_e, alice_d, alice_n = generate_keys(61, 53)
alice_public_key = (alice_e, alice_n)

# Step 3: CA creates certificate for Alice
certificate = create_certificate("Alice", alice_public_key, ca_private_key, ca_n)

# Step 4: Verify the certificate
print("=== Certificate ===")
print(f"Name: {certificate['name']}")
print(f"Public Key: {certificate['public_key']}")
print(f"Signature: {certificate['signature']}")

valid = verify_certificate(certificate, ca_public_key, ca_n)
print(f"\nCertificate Valid? {'Yes' if valid else ' No'}")
